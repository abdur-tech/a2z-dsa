Maximum XOR of two numbers in an array

Given an integer array nums, return the maximum result of nums[i] XOR nums[j], where 0 <= i <= j < n.

 

Example 1:

Input: nums = [3,10,5,25,2,8]
Output: 28
Explanation: The maximum result is 5 XOR 25 = 28.
Example 2:

Input: nums = [14,70,53,83,49,91,36,80,92,51,66,70]
Output: 127
 
 The goal is to maximise the XOR result between two numbers This is achieved by ensuring for each bit position, the XOR result is maximum hence we want to maximise the number of opposite bits between the numbers.

We use a Trie which allows us to iterate through each bit of the numbers in the array and maximise XOR value by selecting the opposite bit when available hence ensuring the highest possible XOR result.

 class Solution {
public:
    struct Node{
        Node* links[2];
        bool checkBit(int bit){
            return links[bit]!=NULL;
        }
        void set(int bit,Node* node){
            links[bit]=node;
        }
        Node* get(int bit) {
            return links[bit]; 
        }
    };
    class Trie{
        private:
            // Root node of the Trie
            Node* root;
        public:
            Trie(){
                root = new Node();
            }
            void insert(int num){
                Node* node = root;
                for(int i = 31;i>=0;i--){
                    int bit = (num>>i)&1;
                    if(!node->checkBit(bit)){
                        node->set(bit,new Node());
                    }
                    node = node->get(bit);
                }
            }
            int findmax(int num){
                Node* node = root;
                int maxi = 0;
                for(int i = 31;i>=0;i--){
                    int bit = (num>>i)&1;
                    if(node->checkBit(1-bit)){
                        maxi = maxi | (1<<i);
                        node = node->get(1-bit);
                    }
                    else{
                        node = node->get(bit);
                    }
                }
                return maxi;
            }
    };
    int findMaximumXOR(vector<int>& nums) {
        int ans = 0;
        Trie trie;
        for(auto it:nums){
            trie.insert(it);
        }
        for(auto it:nums){
            ans = max(ans,trie.findmax(it));
        }
        return ans;
    }
};