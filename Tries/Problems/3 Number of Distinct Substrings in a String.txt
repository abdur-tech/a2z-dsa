Number of Distinct Substrings in a String


Problem statement
Given a string 'S', you are supposed to return the number of distinct substrings(including empty substring) of the given string. You should implement the program using a trie.

Note :
A string ‘B’ is a substring of a string ‘A’ if ‘B’ that can be obtained by deletion of, several characters(possibly none) from the start of ‘A’ and several characters(possibly none) from the end of ‘A’. 

Two strings ‘X’ and ‘Y’ are considered different if there is at least one index ‘i’  such that the character of ‘X’ at index ‘i’ is different from the character of ‘Y’ at index ‘i’(X[i]!=Y[i]).


Sample Input 1 :
2
sds
abc
Sample Output 1 :
6
7
Explanation of Sample Input 1 :
In the first test case, the 6 distinct substrings are { ‘s’,’ d’, ”sd”, ”ds”, ”sds”, “” }

In the second test case, the 7 distinct substrings are {‘a’, ‘b’, ‘c’, “ab”, “bc”, “abc”, “” }.
Sample Input 2 :
2
aa
abab
Sample Output 2 :
3
8
Explanation of Sample Input 2 :
In the first test case, the two distinct substrings are {‘a’, “aa”, “” }.

In the second test case, the seven distinct substrings are {‘a’, ‘b’, “ab”, “ba”, “aba”, “bab”, “abab”, “” }


using a Trie data structure significantly reduces the number of comparisons needed as we traverse the substring, resulting in better performance.

The Trie also uses memory efficiently by storing only the necessary information and avoids redundancy by sharing common prefixes among substrings for better space utilisation especially for long strings with many repeated substrings.

struct Node{
    Node* links[26];
    bool isContainKey(char c){
        return links[c-'a']!=NULL;
    } 
    void putKey(char c,Node* nxt){
        links[c-'a']=nxt;
    }
    Node* getKey(char c){
        return links[c-'a'];
    }
};

int countDistinctSubstrings(string &s)
{
    Node* root = new Node();
    int cnt = 1;
    for(int i = 0;i<s.size();i++){
        Node* tmp = root;
        for(int j = i;j<s.size();j++){
            if(!tmp->isContainKey(s[j])){
                tmp->putKey(s[j], new Node());
                cnt++;
            }
            tmp = tmp->getKey(s[j]);
        }
    }
    return cnt;
}