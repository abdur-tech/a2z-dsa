Minimum Window Substring

Given two strings s and t of lengths m and n respectively, return the minimum window 
substring
 of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string "".

The testcases will be generated such that the answer is unique.

 

Example 1:

Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.
Example 2:

Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.
Example 3:

Input: s = "a", t = "aa"
Output: ""
Explanation: Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.
 

Constraints:

m == s.length
n == t.length
1 <= m, n <= 105
s and t consist of uppercase and lowercase English letters.
 

 class Solution {
public:
    string minWindow(string s, string t) {
        int n = s.size();
        int m = t.size();

        int minlen = INT_MAX;
        int start_index = -1;
        vector<int> mp(256,0);
        for(auto it:t) mp[it]++;
        int l = 0;
        int r=0;
        int cnt = 0;
        while(r<n)
        {
            if(mp[s[r]]>0) //then the element is there
            {
                cnt++;
            }
                mp[s[r]]--;
                while(cnt==m)
                {
                    if(r-l+1<minlen){
                        minlen=r-l+1;
                        start_index = l;
                    }
                    mp[s[l]]++;
                    if(mp[s[l]]>0) cnt--;
                    l++;
                }
            r++;
        }
        if(start_index==-1) return "";
        else return s.substr(start_index,minlen);
    }
};