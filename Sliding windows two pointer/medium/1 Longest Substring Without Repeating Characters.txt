Longest Substring Without Repeating Characters

Given a string s, find the length of the longest 
substring
 without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.

class Solution {
public:
    // Set Method
    // Time Complexity: O( 2*N ) (sometimes left and right both have to travel a complete array)
    // Space Complexity: O(N) where N is the size of HashSet taken for storing the elements
    int _lengthOfLongestSubstring(string s) {
        int i =0;
        int j = 0;
        int n = s.size();
        unordered_set<char> st;
        int ans = 0;
        while(j<n){
            while(st.find(s[j])!=st.end() && i<j){
                st.erase(s[i]);
                i++;
            }
            ans = max(ans,j-i+1);
            st.insert(s[j]);
            j++;
        }
        return ans;
    }
    //Map Method
    //Time Complexity: O( N )
    //Space Complexity: O(N) where N represents the size of HashSet where we are storing our elements
    int lengthOfLongestSubstring(string s) {
        int j = 0;
        int n = s.size();
        unordered_map<char,int> mp;
        int ans = 0;
        for(int i = 0;i<n;i++){
            if(mp.find(s[i])!=mp.end()){
                j = max(mp[s[i]]+1,j);
            }
            mp[s[i]]=i;
            ans = max(ans,i-j+1);
        }
        return ans;
    }
};