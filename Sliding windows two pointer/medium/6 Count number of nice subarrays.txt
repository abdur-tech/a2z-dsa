Count number of nice subarrays

Given an array of integers nums and an integer k. A continuous subarray is called nice if there are k odd numbers on it.

Return the number of nice sub-arrays.

 

Example 1:

Input: nums = [1,1,2,1,1], k = 3
Output: 2
Explanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].
Example 2:

Input: nums = [2,4,6], k = 1
Output: 0
Explanation: There are no odd numbers in the array.
Example 3:

Input: nums = [2,2,2,1,2,2,1,2,2,2], k = 2
Output: 16
 

Constraints:

1 <= nums.length <= 50000
1 <= nums[i] <= 10^5
1 <= k <= nums.length

class Solution {
public:
int findSubarrayWithLessThanGoal(vector<int>& nums, int goal){
        int ans = 0;
        int cnt = 0;
        int l=0,r=0;
        int n = nums.size();
         if(goal<0)
            return 0;
        while(r<n){
            if(nums[r]&1) cnt++;
            while(cnt>goal){
                if(nums[l]&1) cnt--;
                l++;
            }
            ans+=r-l+1;
            r++;
        }
        return ans;
    }
    int numberOfSubarrays(vector<int>& nums, int k) {
        return findSubarrayWithLessThanGoal(nums,k) - findSubarrayWithLessThanGoal(nums,k-1);
    }
};