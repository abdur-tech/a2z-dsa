Binary subarray with sum

Given a binary array nums and an integer goal, return the number of non-empty subarrays with a sum goal.

A subarray is a contiguous part of the array.

 

Example 1:

Input: nums = [1,0,1,0,1], goal = 2
Output: 4
Explanation: The 4 subarrays are bolded and underlined below:
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
Example 2:

Input: nums = [0,0,0,0,0], goal = 0
Output: 15
 

 class Solution {
public:
//This function will give us the number of subarrays
    //which is having the sum<=goal, means atmost the sum 
    //can be goal, but additionally it will also count the
    //subarrays having sum<goal.
    int findSubarrayWithLessThanGoal(vector<int>& nums, int goal){
        int ans = 0;
        int sum = 0; // For calculating the current sum
        int l=0,r=0;
        int n = nums.size();
         //checking if the goal is negative
        //then return 0 as sum can't be negative
        //0's and 1's are there in the array.
         if(goal<0)
            return 0;
        while(r<n){
            //we're iterating over the nums array and 
            //then adding the current element into the sum
            sum+=nums[r];
            while(sum>goal){
                sum-=nums[l];
                l++;
            }
            //We're adding the length of each subarray 
            //to our result
            ans+=r-l+1;
            r++;
        }
        return ans;
    }
    int numSubarraysWithSum(vector<int>& nums, int goal) {
        return findSubarrayWithLessThanGoal(nums,goal) - findSubarrayWithLessThanGoal(nums,goal-1); 
    }
};