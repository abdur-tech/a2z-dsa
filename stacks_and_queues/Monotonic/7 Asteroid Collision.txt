	
Asteroid Collision

We are given an array asteroids of integers representing asteroids in a row.

For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.

Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.

 

Example 1:

Input: asteroids = [5,10,-5]
Output: [5,10]
Explanation: The 10 and -5 collide resulting in 10. The 5 and 10 never collide.
Example 2:

Input: asteroids = [8,-8]
Output: []
Explanation: The 8 and -8 collide exploding each other.
Example 3:

Input: asteroids = [10,2,-5]
Output: [10]
Explanation: The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10.
 


Intuition
So, about thinking on this problem, I notices that whenever an astroid was moving in the opposite way, then it may / may not affect the asteroids before it. From there, I thought that this will be solved by using a stack.

Approach
We can do one thing. Let we are only inserting the asteroids which are positive(Moving Right) into the stack as they will never collide.
Now whenever we come across a negative asteroid, we will check our stack with following conditions -:

If our stack is not empty and the absolute value of the negative asteroid is greater than our top element of the stack, then we will keep popping out of the stack.

If our stack is not empty and absolute value of negative asteroid becomes equal to the positive value present at the top of stack, then both the asteoroids will explode therefore, we will pop the positive asteroid from the stack.

Now, the last condition is that let's say if our stack becomes empty while popping out, it means that the negative asteroid destroyed all the positive asteroids and then we will push that negative asteroid into our stack for future processing.
Now check here that if we pushed the negative element in the stack, then it may have a chance that negative elements occupy the top of the stack, therefore if the top of the stack if negative, we can still push them in the stack.

After we made all the processing, we can make an "ans" vector and store the values of stack while stack is not empty. Also note that the values will be inserted in reversed order due to the nature of stack, so we have to reverse tha stack after completing the process.

HOPE YOU LIKED THE SOLUTION AND DO UPVOTE !!

Complexity
Time complexity: O(n)

Space complexity: O(n)

class Solution {
public:
    vector<int> asteroidCollision(vector<int>& ast) {
        int n = ast.size();
        stack<int> s;
        for(int i = 0; i < n; i++) {
            if(ast[i] > 0 || s.empty()) {
                s.push(ast[i]);
            }
            else {
                while(!s.empty() and s.top() > 0 and s.top() < abs(ast[i])) {
                    s.pop();
                }
                if(!s.empty() and s.top() == abs(ast[i])) {
                    s.pop();
                }
                else {
                    if(s.empty() || s.top() < 0) {
                        s.push(ast[i]);
                    }
                }
            }
        }
		// finally we are returning the elements which remains in the stack.
		// we have to return them in reverse order.
        vector<int> res(s.size());
        for(int i = (int)s.size() - 1; i >= 0; i--) {
            res[i] = s.top();
            s.pop();
        }
        return res;
    }
};