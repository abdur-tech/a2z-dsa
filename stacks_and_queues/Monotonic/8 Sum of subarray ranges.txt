Sum of Subarray Ranges

You are given an integer array nums. The range of a subarray of nums is the difference between the largest and smallest element in the subarray.

Return the sum of all subarray ranges of nums.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [1,2,3]
Output: 4
Explanation: The 6 subarrays of nums are the following:
[1], range = largest - smallest = 1 - 1 = 0 
[2], range = 2 - 2 = 0
[3], range = 3 - 3 = 0
[1,2], range = 2 - 1 = 1
[2,3], range = 3 - 2 = 1
[1,2,3], range = 3 - 1 = 2
So the sum of all ranges is 0 + 0 + 0 + 1 + 1 + 2 = 4.
Example 2:

Input: nums = [1,3,3]
Output: 4
Explanation: The 6 subarrays of nums are the following:
[1], range = largest - smallest = 1 - 1 = 0
[3], range = 3 - 3 = 0
[3], range = 3 - 3 = 0
[1,3], range = 3 - 1 = 2
[3,3], range = 3 - 3 = 0
[1,3,3], range = 3 - 1 = 2
So the sum of all ranges is 0 + 0 + 0 + 2 + 0 + 2 = 4.
Example 3:

Input: nums = [4,-2,-3,4,1]
Output: 59
Explanation: The sum of all subarray ranges of nums is 59.

This problem then boils to one simple observation:

sum_of_all_the_differences = sum_of_all_the_maximums - sum_of_all_the_minimums

Where,

sum_of_all_the_maximums = sum of (no_of_subarrays_where_arr[i]_is_maximum * arr[i])
sum_of_all_the_minimums = sum of (no_of_subarrays_where_arr[i]_is_minimum * arr[i])
Complexity
Time complexity: O(n)

Space complexity: O(n)

class Solution {
public:
    long long sumSubarrayMins(vector<int>& arr) {
        long long ans = 0;
        int n = arr.size();
        vector<int> leftarray(n),rightarray(n);
        stack<pair<int,int>> leftstack,rightstack;
        long long mod = 1e9+7;
        // finding left array
        for(int i = 0;i<n;i++)
        {
            int cnt = 1;
            while(!leftstack.empty() && leftstack.top().first>arr[i]){
                cnt+=leftstack.top().second;
                leftstack.pop();
            }
            leftstack.push({arr[i],cnt});
            leftarray[i]=cnt;
        }
        // finding right array
        for(int i = n-1;i>=0;i--)
        {
            int cnt = 1;
            while(!rightstack.empty() && rightstack.top().first>=arr[i]){  //equal for duplicates value
                cnt+=rightstack.top().second;
                rightstack.pop();
            }
            rightstack.push({arr[i],cnt});
            rightarray[i]=cnt;
        }

        for(int i = 0;i<n;i++){
            ans = (ans + (long long)arr[i] * leftarray[i] * rightarray[i]);
        }
        return ans;
    }
   long long sumSubarrayMax(vector<int>& arr) {
        long long ans = 0;
        int n = arr.size();
        vector<int> leftarray(n),rightarray(n);
        stack<pair<int,int>> leftstack,rightstack;
        long long mod = 1e9+7;
        // finding left array
        for(int i = 0;i<n;i++)
        {
            int cnt = 1;
            while(!leftstack.empty() && leftstack.top().first<arr[i]){
                cnt+=leftstack.top().second;
                leftstack.pop();
            }
            leftstack.push({arr[i],cnt});
            leftarray[i]=cnt;
        }
        // finding right array
        for(int i = n-1;i>=0;i--)
        {
            int cnt = 1;
            while(!rightstack.empty() && rightstack.top().first<=arr[i]){  //equal for duplicates value
                cnt+=rightstack.top().second;
                rightstack.pop();
            }
            rightstack.push({arr[i],cnt});
            rightarray[i]=cnt;
        }

        for(int i = 0;i<n;i++){
            ans = (ans + (long long)arr[i] * leftarray[i] * rightarray[i]);
        }
        return ans;
    }
    long long subArrayRanges(vector<int>& nums) {
        int sum = 0;
        long long sum_min = sumSubarrayMins(nums);
        long long sum_max = sumSubarrayMax(nums);
        return sum_max-sum_min;
    }
};
