Find the two numbers appearing odd number of times


Given an unsorted array, Arr[] of size N and that contains even number of occurrences for all numbers except two numbers. Find the two numbers in decreasing order which has odd occurrences.

Example 1:

Input:
N = 8
Arr = {4, 2, 4, 5, 2, 3, 3, 1}
Output: {5, 1} 
Explaination: 5 and 1 have odd occurrences.

Example 2:

Input:
N = 8
Arr = {1 7 5 7 5 4 7 4}
Output: {7, 1}
Explaination: 7 and 1 have odd occurrences.

Your Task:
You don't need to read input or print anything. Your task is to complete the function twoOddNum() which takes the array Arr[] and its size N as input parameters and returns the two numbers in decreasing order which have odd occurrences.


Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

check my noteboook or youtube for explanation

vector<long long int> twoOddNum(long long int Arr[], long long int N)  
    {
        int xorr = 0;
        for(int i = 0;i<N;i++) xorr^=Arr[i];  // from this we cand find which bits are differet, so we can put in different bucket
        int rightmost_setbit = xorr^(xorr&xorr-1);  //get the rightmost set bit
        int b1 = 0;    //bucket1
        int b2 = 0;    //bucket2
        for(int i = 0;i<N;i++)
        {
            if(Arr[i]&rightmost_setbit)
            {
                b1^=Arr[i];
            }
            else{
                b2^=Arr[i];
            }
        }
        vector<long long int> ans;
        if(b1>b2){
            ans.push_back(b1);
            ans.push_back(b2);
        }
        else{
            ans.push_back(b2);
            ans.push_back(b1);
        }
        return ans;
    }


    O(2N)