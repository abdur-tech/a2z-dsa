Find xor of numbers from L to R

You are given two integers L and R, your task is to find the XOR of elements of the range [L, R].

Example:

Input: 
L = 4, R = 8 
Output:
8 
Explanation:
4 ^ 5 ^ 6 ^ 7 ^ 8 = 8
Your Task:

Your task is to complete the function findXOR() which takes two integers l and r and returns the XOR of numbers from l to r.

Expected Time Complexity: O(1).

Expected Auxiliary Space: O(1).

Constraints:

1<=l<=r<=109



solution:-


    //pattern
    // 1   = 1
    // 2  1^2 = 3
    // 3  1^2^3 = 0
    // 4  1^2^3^4 = 4
    
    //5  1^2^3^4^5 = 1
    //6 1^2^3^4^5^6 = 7
    //7 1^2^3^4^5^6^7 = 0
    //8 1^2^3^4^5^6^7^8 = 8
    
    //are you seeing the patter
    int findXorTillN(int N)
    {
        if(N%4==1) return 1;
        if(N%4==2) return N+1;
        if(N%4==3) return 0;
        if(N%4==0) return N;
    }
    int findXOR(int l, int r) {
        int till_1_to_r = findXorTillN(r);
        int till_1_to_l = findXorTillN(l-1);
        // (1^2^3) ^ (1^2^3^4^5^6^7^8) = (4^5^6^7^8)
        return till_1_to_l ^ till_1_to_r ;
    }

O(1)