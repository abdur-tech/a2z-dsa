Bit Manipulation

Given a 32 bit unsigned integer num and an integer i. Perform following operations on the number - 

1. Get ith bit

2. Set ith bit

3. Clear ith bit

Note : For better understanding, we are starting bits from 1 instead 0. (1-based)

Example 1:

Input: 70 3
Output: 1 70 66
Explanation: Bit at the 3rd position from LSB is 1. (1 0 0 0 1 1 0)
The value of the given number after setting the 3rd bit is 70. 
The value of the given number after clearing 3rd bit is 66. (1 0 0 0 0 1 0)
Example 2:

Input: 8 1
Output: 0 9 8
Explanation: Bit at the first position from LSB is 0. (1 0 0 0)
The value of the given number after setting the 1st bit is 9. (1 0 0 1)
The value of the given number after clearing 1st bit is 8. (1 0 0 0)

https://www.youtube.com/watch?v=h7meukyY_bQ&pp=ygUeZ2V0IHRoZSBpdGggYml0IG9mIGludGVnZXIgY3Bw --> for understanding

void bitManipulation(int num, int i) {
        
        //get the ith bit
        // for n = 3 and i =1
        // 3 --> 011
        // 1<<1 --> 010
        // & ---> 010 
        //===1 so it is 1
        if(num & (1<<(i-1))) cout<<1<<" ";
        else cout<<0<<" ";
        
        //set the ith bit
        cout<<(num|(1<<i-1))<<" ";
        
        //clear the ith bit
        cout<<(num&(~(1<<i-1)));
        
        
}