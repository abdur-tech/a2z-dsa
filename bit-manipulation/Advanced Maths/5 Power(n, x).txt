Power(n, x)

Implement pow(x, n), which calculates x raised to the power n (i.e., xn).

 

Example 1:

Input: x = 2.00000, n = 10
Output: 1024.00000
Example 2:

Input: x = 2.10000, n = 3
Output: 9.26100
Example 3:

Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25
 

Constraints:

-100.0 < x < 100.0
-231 <= n <= 231-1
n is an integer.
Either x is not zero or n > 0.
-104 <= xn <= 104

double myPow(double x, int n) {
        if(x==0) return x;
        if(n==0) return 1;
        long long nn = n; //because n is -231 <= n <= 231-1  , for n = -2 pow 31, if we do multiplacation of -1, it will overflow
        double ans = 1;
        if(nn<0)  nn*=-1; //for negartive n
        while(nn>0)
        {
            if(nn&1==1)  //odd
            {
                ans = ans*x;
                nn = nn-1;
            }
            else{   //even
                x = x*x;
                nn = nn/2;
            }
        }
        if(n<0) return 1.0/ans;
        return ans;
    }


    TC  -> O(logN)
    SC -> O(1)
