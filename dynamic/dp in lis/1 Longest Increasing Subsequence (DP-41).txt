300. Longest Increasing Subsequence

Given an integer array nums, return the length of the longest strictly increasing 
subsequence
.

Example 1:

Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.
Example 2:

Input: nums = [0,1,0,3,2,3]
Output: 4
Example 3:

Input: nums = [7,7,7,7,7,7,7]
Output: 1

class Solution {
public:
//MEmoization
    int f(int ind,int prev,vector<int>& nums,vector<vector<int>> &dp){
        if(ind==nums.size()) return 0;
        int taken = 0;
        int notaken = 0;
        if(dp[ind][prev+1]!=-1) return dp[ind][prev+1];
        if(prev==-1 || nums[ind]>nums[prev])
        {
            taken = 1 + f(ind+1,ind,nums,dp);
        }
        notaken = f(ind+1,prev,nums,dp);
        
        return dp[ind][prev+1]=max(taken,notaken);
        
    }
    int lengthOfLIS(vector<int>& nums) {
     int n = nums.size();
     vector<vector<int>> dp(n+1,vector<int>(n+2,-1));
     return f(0,-1,nums,dp);   
    }
};