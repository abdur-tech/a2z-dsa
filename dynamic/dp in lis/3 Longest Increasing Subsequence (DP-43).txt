	
Longest Increasing Subsequence |(DP-43)

Given an array a[ ] of n integers, find the Length of the Longest Strictly Increasing Subsequence.

A sequence of numbers is called "strictly increasing" when each term in the sequence is smaller than the term that comes after it.


Example 1:

Input: n = 6, a[ ] = {5,8,3,7,9,1}
Output: 3
Explanation: There are more than one LIS in this array.  
One such Longest increasing subsequence is {5,7,9}.
Example 2:

Input: n = 16, a[ ] = {0,8,4,12,2,10,6,14,1,9,5,13,3,11,7,15}
Output: 6
Explanation: There are more than one LIS in this array. 
One such Longest increasing subsequence is {0,2,6,9,13,15}.


What is the Longest Increasing Subsequence?

The longest increasing subsequence is described as a subsequence of an array where:

All elements of the subsequence are in increasing order.
This subsequence itself is of the longest length possible.



class Solution
{
    public:
    //Function to find length of longest increasing subsequence.
    
    
    //1st method TC -> O(N2) using dp
    int _longestSubsequence(int n, int a[])
    {
       vector<int> dp(n+1,1);
       int maxi = -1;
       for(int i = 0;i<n;i++)
       {
           for(int prev = 0;prev<=i-1;prev++){
               
               if(a[i]>a[prev]){
                   dp[i] = max(dp[i],1+dp[prev]);
               }
           }
           maxi=max(maxi,dp[i]);
       }
       return maxi;
    }
    //2nd Method using binary search
    int longestSubsequence(int n, int a[])
    {
       vector<int> temp;
       temp.push_back(a[0]);
       for(int i = 0;i<n;i++)
       {
           if(temp.back()<a[i]){
               temp.push_back(a[i]);
           }
           else{
               int it = lower_bound(temp.begin(),temp.end(),a[i]) - temp.begin();
               temp[it]=a[i];
           }
       }
       return temp.size();
    }
};