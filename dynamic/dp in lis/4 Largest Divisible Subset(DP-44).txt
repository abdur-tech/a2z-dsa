Largest Divisible Subset|(DP-44)

Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:

answer[i] % answer[j] == 0, or
answer[j] % answer[i] == 0
If there are multiple solutions, return any of them.

 

Example 1:

Input: nums = [1,2,3]
Output: [1,2]
Explanation: [1,3] is also accepted.
Example 2:

Input: nums = [1,2,4,8]
Output: [1,2,4,8]
 

 class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& arr) {
        int n = arr.size();
        sort(arr.begin(),arr.end());
        vector<int> dp(n,1);
        vector<int> hash(n);
        int maxi = -1;
        int maxi_ind = 0;
        for(int i = 0;i<n;i++)
            {
                hash[i]=i;
               for(int prev = 0;prev<=i-1;prev++){
                   
                   if(arr[i]%arr[prev]==0 && dp[i]<1+dp[prev]){
                       dp[i] = 1+dp[prev];
                       hash[i] = prev;
                   }
               }
               if(dp[i]>maxi){
                   maxi=dp[i];
                   maxi_ind=i;
               }
        }
        vector<int> ans;
        ans.push_back(arr[maxi_ind]);
        while(hash[maxi_ind]!=maxi_ind){
            maxi_ind = hash[maxi_ind];
            ans.push_back(arr[maxi_ind]);
        }
        reverse(ans.begin(),ans.end());
        return ans;
    }
};

