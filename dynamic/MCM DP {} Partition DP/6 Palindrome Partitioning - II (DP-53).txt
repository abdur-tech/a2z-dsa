Palindrome Partitioning - II|(DP-53)

Given a string s, partition s such that every 
substring
 of the partition is a 
palindrome
.

Return the minimum cuts needed for a palindrome partitioning of s.

 

Example 1:

Input: s = "aab"
Output: 1
Explanation: The palindrome partitioning ["aa","b"] could be produced using 1 cut.
Example 2:

Input: s = "a"
Output: 0
Example 3:

Input: s = "ab"
Output: 1

Example 1:
Input:
 s = “bababcbadcede”
Output
: 4
Explanation:
 If we do 4 partitions in the following way, 
each substring of the partition will be a palindrome.
bab | abcba | d | c | ede
Input
: s = "aab"
Output
: 1
Explanation
: If we do 1 partition in the following way, 
each substring of the partition will be a palindrome.
aa | b


class Solution {
public:
    bool isPalindrome(int i,int j,string &s){
        while(i<j){
            if(s[i]!=s[j]) return false;
            i++;
            j--;
        }
        return true;
    }
    int f(int i,string &s,vector<int> &dp){
        if(i==s.size()) return 0;
        if(dp[i]!=-1) return dp[i];
        int mini = INT_MAX;
        for(int j = i;j<s.size();j++){
            if(isPalindrome(i, j, s)){
                mini = min(mini,1 + f(j+1,s,dp));
            }
        }
        return dp[i]=mini;
    }
    //Memoization
    int _minCut(string s) {
        vector<int> dp(s.size(),-1);
        // Calling the recursive function and subtracting 1 as it counts partitions, not cuts.
        return f(0,s,dp)-1;
    }
    int minCut(string s) {
        vector<int> dp(s.size()+1,0);
        for(int i=s.size()-1;i>=0;i--){
            int mini = INT_MAX;
            for(int j = i;j<s.size();j++){
                if(isPalindrome(i, j, s)){
                    mini = min(mini,1 + dp[j+1]);
                }
            }
            dp[i]=mini;
        }
        return dp[0]-1;

    }
};