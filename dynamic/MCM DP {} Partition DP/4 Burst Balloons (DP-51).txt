Burst Balloons|(DP-51)

You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.

If you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.

Return the maximum coins you can collect by bursting the balloons wisely.

 

Example 1:

Input: nums = [3,1,5,8]
Output: 167
Explanation:
nums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []
coins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167
Example 2:

Input: nums = [1,5]
Output: 10


class Solution {
public:
    int f(int i,int j,vector<int>& nums,vector<vector<int>> &dp){
        if(i>j) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        int maxi_burst = INT_MIN;
        for(int k=i;k<=j;k++){
            int burst_count =1;
            if(i-1>=0) burst_count*=nums[i-1];
            if(j+1<=nums.size()-1) burst_count*=nums[j+1];
            burst_count*=nums[k];
            burst_count += f(i,k-1,nums,dp) + f(k+1,j,nums,dp);
            maxi_burst = max(maxi_burst,burst_count);
        }
        return dp[i][j]=maxi_burst;
    }
    //Memoziation
    int _maxCoins(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> dp(n,vector<int>(n,-1));
        return f(0,n-1,nums,dp);
    }
    //Tabulation
    int maxCoins(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> dp(n+1,vector<int>(n+1,0));
        for(int i = n-1;i>=0;i--){
            for(int j = 0;j<=n-1;j++){
                 if(i>j) continue;
                 int maxi_burst = INT_MIN;
                for(int k=i;k<=j;k++){

                    //int left = i >= 1  ? nums[i - 1] : 1 , right = j + 1 < n ? nums[j + 1] : 1;
                    //dp[i][j] = max(dp[i][j] , (k >= 1 ?  dp[i][k - 1] : 0) + left * nums[k] * right + dp[k + 1][j]);


                    int burst_count =1;
                    if(i-1>=0) burst_count*=nums[i-1];
                    if(j+1<=n-1) burst_count*=nums[j+1];
                    burst_count*=nums[k];
                    burst_count +=(k >= 1 ?  dp[i][k - 1] : 0) + dp[k+1][j];
                    maxi_burst = max(maxi_burst,burst_count);
                }
                dp[i][j]=maxi_burst;
            }
        }
        return dp[0][n-1];
    }
};