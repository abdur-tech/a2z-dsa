House Robber II

Its is same as before, jsut little modificsation
no we need to find in circular

You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.

 

Example 1:

Input: nums = [2,3,2]
Output: 3
Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.
Example 2:

Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.
Example 3:

Input: nums = [1,2,3]
Output: 3

Approach:

The approach to solving this problem can be summarized as:

Make two reduced arrays - arr1(arr-last element) and arr2(arr-first element).
Find the maximum of non-adjacent elements as mentioned in article DP5 on arr1 and arr2 separately. Letâ€™s call the answers we got ans1 and ans2 respectively.
Return max(ans1, ans2) as our final answer.
Code:

This problem is a little tricky at first glance. However, if you have finished the House Robber problem, this problem can simply be decomposed into two House Robber problems.
Suppose there are n houses, since house 0 and n - 1 are now neighbors, we cannot rob them together and thus the solution is now the maximum of

Rob houses 0 to n - 2;
Rob houses 1 to n - 1.
The code is as follows. Some edge cases (n < 2) are handled explicitly.


//memoization way
class Solution {
public:
   // Memoization
    int f(int idx,vector<int>& nums,vector<int>& dp)
    {
        if(idx<0){
            return 0;
        }
        if(dp[idx]!=-1) return dp[idx];
        int pick = f(idx-2,nums,dp) + nums[idx];
        int  nonpick = f(idx-1,nums,dp);

        return dp[idx]=max(pick,nonpick);
    }
    int rob(vector<int>& nums) {
         if (nums.size() == 0) return 0;
        if (nums.size() == 1) return nums[0];
        if (nums.size() == 2) return max(nums[0], nums[1]);
        vector<int> dp1(nums.size()+1,-1);
        vector<int> dp2(nums.size()+1,-1);
        vector<int> v1(nums.begin(), nums.end()-1);
        vector<int> v2(nums.begin()+1, nums.end());
        return max(f(v1.size()-1,v1,dp1),f(v2.size()-1,v2,dp2));
    }
};