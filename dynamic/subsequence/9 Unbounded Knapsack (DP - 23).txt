Knapsack with Duplicate Items

Given a set of N items, each with a weight and a value, represented by the array wt and val respectively. Also, a knapsack with weight limit W.
The task is to fill the knapsack in such a way that we can get the maximum profit. Return the maximum profit.
Note: Each item can be taken any number of times.

Examples:

Input: N = 2, W = 3, val = {1, 1}, wt = {2, 1}
Output: 3
Explanation: 1.Pick the 2nd element thrice. 2.Total profit = 1 + 1 + 1 = 3. Also the total weight = 1 + 1 + 1  = 3 which is <= 3.
Input: N = 4, W = 8, val[] = {6, 1, 7, 7}, wt[] = {1, 3, 4, 5}
Output: 48
Explanation: The optimal choice is to pick the 1st element 8 times.
Your Task:
You do not need to read input or print anything. Your task is to complete the function knapSack() which takes the values N, W and the arrays val and wt as input parameters and returns the maximum possible value.

Expected Time Complexity: O(N*W)
Expected Auxiliary Space: O(W)

class Solution{
public:
    //memoization
    int f(int ind,int N,int W,int val[],int wt[],vector<vector<int>> &dp)
    {
        if(ind==0) return W/wt[0]*val[0];
        if(dp[ind][W]!=-1) return dp[ind][W];
        int Taken = 0;
        if(wt[ind]<=W) Taken=val[ind]+f(ind,N,W-wt[ind],val,wt,dp);
        int Notaken=f(ind-1,N,W,val,wt,dp);
        return dp[ind][W]=max(Taken,Notaken);
    }
    int _knapSack(int N, int W, int val[], int wt[])
    {
        vector<vector<int>> dp(N+1,vector<int>(W+1,-1));
        return f(N-1,N,W,val,wt,dp);
    }
    
    //tabulation
    int knapSack(int N, int W, int val[], int wt[])
    {
        vector<vector<int>> dp(N+1,vector<int>(W+1,0));
        for(int i=1;i<=W;i++)
        {
            dp[0][i]=i/wt[0]*val[0];
        }
        for(int i=1;i<N;i++)
        {
            for(int j=1;j<=W;j++){
                int Taken = 0;
                if(wt[i]<=j) Taken=val[i]+dp[i][j-wt[i]];
                int Notaken=dp[i-1][j];
                dp[i][j]=max(Taken,Notaken);
            }
        }
        return dp[N-1][W];
        
    }
};