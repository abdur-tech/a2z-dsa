Rod Cutting Problem | (DP - 24)


Given a rod of length N inches and an array of prices, price[]. price[i] denotes the value of a piece of length i. Determine the maximum value obtainable by cutting up the rod and selling the pieces.

Note: Consider 1-based indexing.

Example 1:

Input:
N = 8
Price[] = {1, 5, 8, 9, 10, 17, 17, 20}
Output:
22
Explanation:
The maximum obtainable value is 22 by 
cutting in two pieces of lengths 2 and 
6, i.e., 5+17=22.
Example 2:

Input:
N=8
Price[] = {3, 5, 8, 9, 10, 17, 17, 20}
Output: 
24
Explanation: 
The maximum obtainable value is 
24 by cutting the rod into 8 pieces 
of length 1, i.e, 8*price[1]= 8*3 = 24. 

class Solution{
  public:
    
    int f(int ind, int currlen, int price[],vector<vector<int>> &dp) {
        if (ind == 0) {
            return currlen * price[0];  // The entire rod is cut into pieces of size 1
        }
        if(dp[ind][currlen]!=-1) return dp[ind][currlen]; 
        int taken = INT_MIN;
        // Ensure you can cut a piece of length `ind + 1`
        if (currlen >= ind + 1) {
            taken = price[ind] + f(ind, currlen - (ind + 1), price,dp);
        }
    
        int notaken = f(ind - 1, currlen, price,dp);  // Skip this piece size
        return dp[ind][currlen]=max(taken, notaken);
    }
    //memoization
    int _cutRod(int price[], int n) {
        vector<vector<int>> dp(n,vector<int>(n+1,-1));
        return f(n-1,n,price,dp);
    }
    //Tabulation
    int cutRod(int price[], int n) {
        vector<vector<int>> dp(n,vector<int>(n+1,0));
        for(int i = 1;i<=n;i++)
        {
            dp[0][i]=i*price[0];
        }
        for(int ind=1;ind<n;ind++)
        {
            for(int curlen=1;curlen<=n;curlen++)
            {
                int taken = INT_MIN;
                // Ensure you can cut a piece of length `ind + 1`
                if (curlen >= (ind + 1)) {
                    taken = price[ind] + dp[ind][curlen-(ind+1)];
                }
            
                int notaken = dp[ind-1][curlen];
                dp[ind][curlen]=max(taken,notaken);
            }
        }
        return dp[n-1][n];
    }
    
    
};