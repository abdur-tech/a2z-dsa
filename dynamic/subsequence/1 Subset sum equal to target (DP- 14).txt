Subset Sum Problem

Given an array of non-negative integers, and a value sum, determine if there is a subset of the given set with sum equal to given sum. 

Examples:

Input: n = 6, arr[] = {3, 34, 4, 12, 5, 2}, sum = 9
Output: 1 
Explanation: Here there exists a subset with sum = 9, 4+3+2 = 9.
Input: n = 6, arr[] = {3, 34, 4, 12, 5, 2} , sum = 30
Output: 0 
Explanation: There is no subset with sum 30.



    //Memoziation
    bool f(int idx,vector<int> &arr, int sum,vector<vector<int>> &dp)
    {
        if(sum==0){
            return true;
        }
        if(idx==0) return (arr[0]==sum);
        if(dp[idx][sum]!=-1) return dp[idx][sum];
        
        bool notake = f(idx-1,arr,sum,dp);
        bool take = false;
        if(arr[idx]<=sum) take = f(idx-1,arr,sum-arr[idx],dp);
        
        return dp[idx][sum]= (take || notake);
    }
    bool _isSubsetSum(vector<int>arr, int sum){
        vector<vector<int>> dp(arr.size(),vector<int>(sum+1,-1));
        return f(arr.size()-1,arr,sum,dp);
    }
    
    //Tabulation
    bool isSubsetSum(vector<int>arr, int k){
        int n = arr.size();
        vector<vector<bool>> dp(n,vector<bool>(k+1,false));
        
        for(int i = 0;i<n;i++) {
            dp[i][0]=true;
        }
         if (arr[0] <= k) {
            dp[0][arr[0]] = true;
        }
        for(int ind =1;ind<n;ind++)
        {
            for(int target = 1;target<=k;target++)
            {
                 bool notTaken = dp[ind - 1][target];
                 bool taken = false;
                if (arr[ind] <= target) {
                taken = dp[ind - 1][target - arr[ind]];
            }
                
                dp[ind][target]= notTaken || taken;
            }
        }
        return dp[n-1][k];
    }
};

Memoization -> 

Time Complexity: O(N*K)

Reason: There are N*K states therefore at max ‘N*K’ new problems will be solved.

Space Complexity: O(N*K) + O(N)

Reason: We are using a recursion stack space(O(N)) and a 2D array ( O(N*K)).

Tabulation -> 
Time Complexity: O(N*K)

Reason: There are two nested loops

Space Complexity: O(N*K)

Reason: We are using an external array of size ‘N*K’. Stack Space is eliminated.