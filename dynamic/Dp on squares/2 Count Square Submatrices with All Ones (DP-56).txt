Count Square Submatrices with All Ones|(DP-56)

Given a m * n matrix of ones and zeros, return how many square submatrices have all ones.

 

Example 1:

Input: matrix =
[
  [0,1,1,1],
  [1,1,1,1],
  [0,1,1,1]
]
Output: 15
Explanation: 
There are 10 squares of side 1.
There are 4 squares of side 2.
There is  1 square of side 3.
Total number of squares = 10 + 4 + 1 = 15.
Example 2:

Input: matrix = 
[
  [1,0,1],
  [1,1,0],
  [1,1,0]
]
Output: 7
Explanation: 
There are 6 squares of side 1.  
There is 1 square of side 2. 
Total number of squares = 6 + 1 = 7.


class Solution {
public:
    int countSquares(vector<vector<int>>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();
        vector<vector<int>> dp(n,vector<int>(m,0));

        for(int i = 0;i<n;i++) dp[i][0] = matrix[i][0];
        for(int j = 0;j<m;j++) dp[0][j] = matrix[0][j];
        for(int i = 1;i<n;i++){
            for(int j = 1;j<m;j++){
                if (matrix[i][j] == 0) dp[i][j] = 0;
                else dp[i][j] = 1 + min(dp[i-1][j],min(dp[i-1][j-1],dp[i][j-1]));
            }
        }
        int sum = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                sum += dp[i][j];
            }
        }
        return sum;
    }
};


Now, itâ€™s time to discuss how to fill the values of the dp array:

If we carefully observe, for the first row and for the first column, each cell (i, j), itself will be the one and only square(if cell(i, j) contains 1) that ends at that particular cell i.e. (i, j). So, for the first row and first column, we will just copy the values of the matrix as it is to the dp array. 
Now, to fill the other cells, we will check the following:
If the cell contains 1, we will have to check its three adjacent cells i.e. (i-1, j), (i-1, j-1), and (i, j-1). We will first figure out the minimum number of squares that end at these adjacent cells. And while filling the value for cell(i, j) we will add 1 with that minimum value as the cell (i, j) itself is a square. The formula will be the following:dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i][j-1]) +1
Otherwise, if the cell(i, j) contains 0, we will also set the value of dp[i][j] as 0.
 Using this approach, we will fill all the cells of the dp array.

Note: If you wish to see the dry run of the above approach, you can watch the video attached to this article.

Approach: 

The algorithm steps are as follows:

First, we need to create a dp array of the same size as the matrix.
Then, we will copy the values of the first row and first column of the matrix as it is to the dp array.
Then, we will start iterating over the rest of the cells and we will observe two cases:
If the cell (i, j) contains 0, we will set the value 0 to the cell dp[i][j].
If the cell (i, j) contains 1, we will first find the minimum value among the adjacent three cells i.e. min(dp[i-1][j], dp[i-1][j-1], dp[i][j-1]). And with that minimum value, we will add 1 and set it to the cell dp[i][j]. The formula will look like the following:
dp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i][j-1]) +1
After filling all the cells in this way, we will just add all the values of the dp array to get the total sum. And this total sum will be the final answer.