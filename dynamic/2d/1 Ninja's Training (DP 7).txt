
Problem Statement: A Ninja has an ‘N’ Day training schedule. He has to perform one of these three activities (Running, Fighting Practice, or Learning New Moves) each day. There are merit points associated with performing an activity each day. The same activity can’t be performed on two consecutive days. We need to find the maximum merit points the ninja can attain in N Days.

We are given a 2D Array POINTS of size ‘N*3’ which tells us the merit point of specific activity on that particular day. Our task is to calculate the maximum number of merit points that the ninja can earn.



Example:
Input: n=3 and arr[]= [[1,2,5],[3,1,1],[3,3,3]]
Output:11
Explanation:Geek will learn a new move and earn 5 point then on second day he will do running and earn 3 point and on third day he will do fighting and earn 3 points so, maximum point is 11.





Solution:-

1. Recursive Approach : [O(2^n) & O(n)] (TLE ❌)

class Solution {
  public:
    int helper(int day, int last, vector<vector<int>>& points){
        if(day == 0){
            int maxi = 0;
            for(int i=0;i<3;i++){
                if(i != last){
                    maxi = max(maxi, points[0][i]);
                }
            }
            return maxi;
        }
        
        int maxi = 0;
        for(int i=0;i<3;i++){
            if(i != last){
                int activity = points[day][i] + helper(day-1, i, points);
                maxi = max(maxi, activity);
            }
        }
        return maxi;
    }
    
    int maximumPoints(vector<vector<int>>& points, int n) {
        return helper(n-1, 3, points);
    }
};
 

2. DP - Memoization : [O(n) & O(n)]

class Solution {
  public:
    int helper(int day, int last, vector<vector<int>>& points, vector<vector<int>>& dp){
        
        if(dp[day][last] != -1) return dp[day][last];
        
        if(day == 0){
            int maxi = 0;
            for(int i=0;i<3;i++){
                if(i != last){
                    maxi = max(maxi, points[0][i]);
                }
            }
            return dp[day][last] = maxi;
        }
        
        int maxi = 0;
        for(int i=0;i<3;i++){
            if(i != last){
                int activity = points[day][i] + helper(day-1, i, points, dp);
                maxi = max(maxi, activity);
            }
        }
        return dp[day][last] = maxi;
    }
    
    int maximumPoints(vector<vector<int>>& points, int n) {
        vector<vector<int>> dp(n, vector<int> (4, -1));
        return helper(n-1, 3, points, dp);
    }
};
 
 it has a very simple solution: dp[i] will store the current ith element (0<=i<3) and take max from prev dp.
3. DP - Tabulation : [O(n) & O(n)]

class Solution {
  public:
    int maximumPoints(vector<vector<int>>& points, int n) {
        vector<vector<int>> dp(n, vector<int> (4, 0));
        dp[0][0] = max(points[0][1], points[0][2]);
        dp[0][1] = max(points[0][0], points[0][2]);
        dp[0][2] = max(points[0][0], points[0][1]);
        dp[0][3] = max(points[0][0], max(points[0][1], points[0][2]));
        
        for(int day=1;day<n;day++){
            for(int last=0;last<4;last++){
                dp[day][last] = 0;
                for(int task=0;task<=2;task++){
                    if(task != last){
                        int activity = points[day][task] + dp[day-1][task];
                        dp[day][last] = max(dp[day][last], activity);
                    }
                }
            }
        }
        return dp[n-1][3];
    }
};
 

4. Optimized - Iterative : [O(n) & O(1)]

class Solution {
  public:
    int maximumPoints(vector<vector<int>>& points, int n) {
        vector<int>prev(4, 0);
        prev[0] = max(points[0][1], points[0][2]);
        prev[1] = max(points[0][0], points[0][2]);
        prev[2] = max(points[0][0], points[0][1]);
        prev[3] = max(points[0][0], max(points[0][1], points[0][2]));
        
        for(int day=1;day<n;day++){
            vector<int>temp(4, 0);
            for(int last=0;last<4;last++){
                temp[last] = 0;
                for(int task=0;task<=2;task++){
                    if(task != last){
                        temp[last] = max(temp[last], points[day][task]+prev[task]);
                    }
                }
            }
            prev = temp;
        }
        return prev[3];
    }
};
 




 ?? Simple solution i got from comment

 i didn't understand why you complicated it, it has a very simple solution: dp[i] will store the current ith element (0<=i<3) and take max from prev dp.
the code(space optimised):-
int ninjaTraining(int n, vector<vector<int>> &v){
    vector<int> dp(3);
    dp[0]=v[0][0];
    dp[1]=v[0][1];
    dp[2]=v[0][2];
    for(int i=1;i<n;i++){
        vector<int> temp(3,0);
        temp[0]= max(dp[1],dp[2])+ v[i][0];
        temp[1]= max(dp[0],dp[2])+ v[i][1];
        temp[2]= max(dp[1],dp[0])+ v[i][2];
        dp=temp;
    }
    return max(max(dp[0], dp[1]), dp[2]);
}

if you're having trouble in the above, see the below code:-
int ninjaTraining(int n, vector<vector<int>> &v){
    vector<vector<int>> dp(n, vector<int>(3, 0));
    dp[0][0]=v[0][0];
    dp[0][1]=v[0][1];
    dp[0][2]=v[0][2];
    for(int i=1;i<n;i++){
        dp[i][0]= max(dp[i-1][1],dp[i-1][2])+ v[i][0];
        dp[i][1]= max(dp[i-1][0],dp[i-1][2])+ v[i][1];
        dp[i][2]= max(dp[i-1][1],dp[i-1][0])+ v[i][2];
    }
    return max(max(dp[n-1][0], dp[n-1][1]), dp[n-1][2]);
}

