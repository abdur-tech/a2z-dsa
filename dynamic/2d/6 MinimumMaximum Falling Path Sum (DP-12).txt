931. Minimum Falling Path Sum

Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.

A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).


Example 1:

Input: matrix = [[2,1,3],[6,5,4],[7,8,9]]
Output: 13
Explanation: There are two falling paths with a minimum sum as shown.

//I directly solved in TAbulation method
class Solution {
public:
    //tabulation
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size();
        vector<vector<int>> dp(n,vector<int>(n,-1));
        int ans = INT_MAX;
        for(int i = 0;i<1;i++){
            for(int j = 0;j<n;j++)
            {
                dp[i][j]=matrix[i][j];
                ans=min(ans,dp[i][j]);
            }
        }
        if(n==1) return ans;
        ans=INT_MAX;
        for(int i=1;i<n;i++){
            for(int j=0;j<n;j++)
            {
                int upper_left_diagnol=INT_MAX;
                if(j>0) upper_left_diagnol=matrix[i][j]+dp[i-1][j-1];
                int upper=matrix[i][j]+dp[i-1][j];
                int upper_right_diagnol=INT_MAX;
                if(j<n-1) upper_right_diagnol=matrix[i][j]+dp[i-1][j+1];
                dp[i][j]=min(upper_left_diagnol,min(upper,upper_right_diagnol));

                if(i==n-1){
                    ans=min(ans,dp[i][j]);
                }
            }
        }
        return ans;
    }
};