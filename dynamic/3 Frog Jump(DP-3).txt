Frog Jump(DP-3):- https://takeuforward.org/data-structure/dynamic-programming-frog-jump-dp-3/


 Geek wants to climb from the 0th stair to the (n-1)th stair. At a time the Geek can climb either one or two steps. A height[N] array is also given. Whenever the geek jumps from stair i to stair j, the energy consumed in the jump is abs(height[i]- height[j]), where abs() means the absolute difference. return the minimum energy that can be used by the Geek to jump from stair 0 to stair N-1.

Example:
Input:
n = 4
height = {10 20 30 10}
Output:
20
Explanation:
Geek jump from 1st to 2nd stair(|20-10| = 10 energy lost).
Then a jump from the 2nd to the last stair(|10-20| = 10 energy lost).
so, total energy lost is 20 which is the minimum.

//Memoization method 

class Solution {
  public:
    int findmin(int i,vector<int>& height,vector<int> &dp)
    {
        if(i==0){
            return 0;
        }
        if(dp[i]!=-1) return dp[i];
        int left=abs(height[i]-height[i-1])+findmin(i-1,height,dp);
        int right=INT_MAX;
        if(i>1){
            right=abs(height[i]-height[i-2])+findmin(i-2,height,dp);
        }
        return dp[i]=min(left,right);
    }
    int minimumEnergy(vector<int>& height, int n) {
        vector<int> dp(n+1,-1);
        return findmin(n-1,height,dp);
    }
};

