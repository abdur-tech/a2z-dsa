Wildcard Matching | (DP-34)

Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).

 

Example 1:

Input: s = "aa", p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".
Example 2:

Input: s = "aa", p = "*"
Output: true
Explanation: '*' matches any sequence.
Example 3:

Input: s = "cb", p = "?a"
Output: false
Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.

class Solution {
public:
    bool f(int i,int j,string& s,string& p,vector<vector<int>>& dp)
    {
        if(i<0 && j<0) return true;
        if(i<0){ 
            while(j>=0){
                if(p[j]!='*') return false;
                j--;}
            return true;
        }
        if(j<0 && i>=0) return false;
        if(dp[i][j]!=-1) return dp[i][j];
        if(s[i]==p[j] || p[j]=='?')
        {
            return dp[i][j]=f(i-1,j-1,s,p,dp);
        }
        else if(p[j]=='*'){
            return dp[i][j]=f(i-1,j,s,p,dp) || f(i,j-1,s,p,dp);
        }
        else{
            return false;
        }
    }
    //Memoization
    bool _isMatch(string s, string p) {
        int n = s.size();
        int m = p.size();
        vector<vector<int>> dp(n+1,vector<int>(m+1,-1));
        return f(n-1,m-1,s,p,dp);
    }

    bool isMatch(string s, string p) {
        int n = s.size();
        int m = p.size();
        vector<vector<int>> dp(n+1,vector<int>(m+1,0));
        dp[0][0]=1;
        for(int j = 1;j<=m;j++){
            if(p[j-1]!='*') break;
            dp[0][j] = 1;
        } 
        for(int i = 1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(s[i-1]==p[j-1] || p[j-1]=='?') dp[i][j] = dp[i-1][j-1];
                else if(p[j-1]=='*'){
                    dp[i][j] = dp[i-1][j] || dp[i][j-1];
                }
                else dp[i][j]=0;
            }
        }
        return dp[n][m];
    }
};
