Longest Common Subsequence | (DP - 25)

Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

 

Example 1:

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.
Example 2:

Input: text1 = "abc", text2 = "abc"
Output: 3
Explanation: The longest common subsequence is "abc" and its length is 3.
Example 3:

Input: text1 = "abc", text2 = "def"
Output: 0
Explanation: There is no such common subsequence, so the result is 0.


class Solution {
public:
    int f(int i,int j,string &text1,string &text2,vector<vector<int>>& dp)
    {
        if(i==-1 || j==-1) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        int equal = 0;
        int notequal=0;
        if(text1[i]==text2[j])
        {
            equal = 1 + f(i-1,j-1,text1,text2,dp);
        }
        else{
            notequal =max(f(i,j-1,text1,text2,dp),f(i-1,j,text1,text2,dp));
        }
        return dp[i][j]=max(equal,notequal);
    }
    int _longestCommonSubsequence(string text1, string text2) {
        vector<vector<int>> dp(text1.size()+1,vector<int>(text2.size()+1,-1));
        return f(text1.size()-1,text2.size()-1,text1,text2,dp);
    }

    //Tabulation
    because of index<0 , we need to shift the index , so istead of normal index, try index-1


     int longestCommonSubsequence(string text1, string text2) {
        int n = text1.size();
        int m = text2.size();
        vector<vector<int>> dp(n+1,vector<int>(m+1,-1));
        for(int i = 0;i<=n;i++){
            dp[i][0]=0;
        }
        for(int i = 0;i<=m;i++){
            dp[0][i]=0;
        }
        for(int i =1;i<=n;i++)
        {
            for(int j = 1;j<=m;j++)
            {
                int equal = 0;
                int notequal=0;
                if(text1[i-1]==text2[j-1])
                {
                    equal = 1 + dp[i-1][j-1];
                }
                else{
                    notequal =  max(dp[i][j-1],dp[i-1][j]);
                }
                dp[i][j]=max(equal,notequal);
            }
        }
        return dp[n][m];
    }
};