123. Best Time to Buy and Sell Stock III

You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete at most two transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.
Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.
Example 3:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.
 

 class Solution {
public:
    int f(int ind,int buy,vector<int>& prices,int cnt, vector<vector<vector<int>>>& dp){
        if(ind==prices.size() || cnt>=2){
            return 0;
        }
        if(dp[ind][buy][cnt]!=-1) return dp[ind][buy][cnt];
        if(buy==1){
            return dp[ind][buy][cnt]=max( -prices[ind]+f(ind+1,0,prices,cnt,dp),f(ind+1,1,prices,cnt,dp));
        }
        else{
            return dp[ind][buy][cnt]= max( prices[ind]+f(ind+1,1,prices,cnt+1,dp),f(ind+1,0,prices,cnt,dp));
        }
    }
    //Memoization
    int _maxProfit(vector<int>& prices) {
        int n = prices.size();
         vector<vector<vector<int>>> dp(n, vector<vector<int>>(2, vector<int>(3, -1)));
        return f(0,1,prices,0,dp);
    }
    //Tabulation
    int __maxProfit(vector<int>& prices) {
        int n = prices.size();
         vector<vector<vector<int>>> dp(n+1, vector<vector<int>>(2, vector<int>(3, 0)));
        int cnt = 0;
        vector<int> cur(n+1,0);
        vector<int> prev(n+1,0);

        for(int ind = n-1;ind>=0;ind--){
            for(int buy = 0;buy<=1;buy++){
                for(int cnt=0;cnt<=1;cnt++){
                    if(buy){
                        dp[ind][buy][cnt] = max ( -prices[ind] + dp[ind+1][0][cnt]  , dp[ind+1][1][cnt]  );
                    }
                    else{
                        dp[ind][buy][cnt] = max (  +prices[ind] + dp[ind+1][1][cnt+1] , dp[ind+1][0][cnt]    );
                    }
                }
            }
        }
        return dp[0][1][0];
    }
    //Space Optimazation
     int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<int>> curr(2,vector<int>(3,0));
        vector<vector<int>> next(2,vector<int>(3,0));
        for(int ind = n-1;ind>=0;ind--){
            for(int buy = 0;buy<=1;buy++){
                for(int cnt=0;cnt<=1;cnt++){
                    if(buy){
                        curr[buy][cnt] = max ( -prices[ind] + next[0][cnt]  , next[1][cnt]  );
                    }
                    else{
                        curr[buy][cnt] = max (  +prices[ind] + next[1][cnt+1] ,next[0][cnt]    );
                    }
                }
            }
            next = curr;
        }
        return curr[1][0];
    }
};