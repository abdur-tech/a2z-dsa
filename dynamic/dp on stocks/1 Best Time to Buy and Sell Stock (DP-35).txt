122. Best Time to Buy and Sell Stock II

We are given an array Arr[] of length n. It represents the price of a stock on ‘n’ days. The following guidelines need to be followed:

We can buy and sell the stock any number of times.
In order to sell the stock, we need to first buy it on the same or any previous day.
We can’t buy a stock again after buying it once. In other words, we first buy a stock and then sell it. After selling we can buy and sell again. But we can’t sell before buying and can’t buy before selling any previously bought stock.

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
Total profit is 4 + 3 = 7.
Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Total profit is 4.
Example 3:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.

Intuition:

Every day, we will have two choices, either to do nothing and move to the next day or to buy/sell (based on the last transaction) and find out the profit. Therefore we need to generate all the choices in order to compare the profit. As we need to try out all the possible choices, we will use recursion.

class Solution {
public:
    int f(int ind,int buy,vector<int>& prices,vector<vector<int>> &dp)
    {
        if(ind==prices.size()) return 0;
        if(dp[ind][buy]!=-1) return dp[ind][buy];
        //if buy is 1, it means we can buy the stock or we can go to next ind to buy thr stock
        if(buy)
        {
            dp[ind][buy] = max((-1*prices[ind])+f(ind+1,0,prices,dp),f(ind+1,1,prices,dp));
        }
        //if buy is 0, it means we can sell the stock  or we can go to next ind to sell thr stock
        else{
            dp[ind][buy]= max(prices[ind]+f(ind+1,1,prices,dp),f(ind+1,0,prices,dp));
        }
        return dp[ind][buy];

    }
    //memoization
    int __maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<int>> dp(n,vector<int>(2,-1));
        return f(0,1,prices,dp);
    }
    //tabulation
    int _____maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<int>> dp(n+1,vector<int>(2,0));

        for(int i =n-1;i>=0;i--)
        {
            for(int j = 0;j<=1;j++)
            {
                int profit = 0;
                if(j){
                    profit = max( - prices[i] +dp[i+1][0]  ,   dp[i+1][1]);
                }
                else{
                    profit = max( + prices[i]+dp[i+1][1]   ,   dp[i+1][0]);
                }
                dp[i][j]=profit;
            }
        }
        return dp[0][1];
    }
    //Space optimized
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<int> ahead(2,0),curr(2,0);
        for(int i =n-1;i>=0;i--)
        {
            for(int j = 0;j<=1;j++)
            {
                int profit = 0;
                if(j){
                    profit = max( - prices[i] +ahead[0]  ,   ahead[1]);
                }
                else{
                    profit = max( + prices[i]+ahead[1]   ,   ahead[0]);
                }
                curr[j]=profit;
            }
            ahead = curr;
        }
        return curr[1];
    }

};
