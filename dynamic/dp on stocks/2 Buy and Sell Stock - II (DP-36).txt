122. Best Time to Buy and Sell Stock II

You are given an integer array prices where prices[i] is the price of a given stock on the ith day.

On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.

Find and return the maximum profit you can achieve.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
Total profit is 4 + 3 = 7.
Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Total profit is 4.
Example 3:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.

class Solution {
public:
    int f(int ind,int buy,vector<int>& prices,vector<vector<int>> &dp)
    {
        if(ind==prices.size()) return 0;
        if(dp[ind][buy]!=-1) return dp[ind][buy];
        //if buy is 1, it means we can buy the stock or we can go to next ind to buy thr stock
        if(buy)
        {
            dp[ind][buy] = max((-1*prices[ind])+f(ind+1,0,prices,dp),f(ind+1,1,prices,dp));
        }
        //if buy is 0, it means we can sell the stock  or we can go to next ind to sell thr stock
        else{
            dp[ind][buy]= max(prices[ind]+f(ind+1,1,prices,dp),f(ind+1,0,prices,dp));
        }
        return dp[ind][buy];

    }
    //memoization
    int __maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<int>> dp(n,vector<int>(2,-1));
        return f(0,1,prices,dp);
    }
    //tabulation
    int _____maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<int>> dp(n+1,vector<int>(2,0));

        for(int i =n-1;i>=0;i--)
        {
            for(int j = 0;j<=1;j++)
            {
                int profit = 0;
                if(j){
                    profit = max( - prices[i] +dp[i+1][0]  ,   dp[i+1][1]);
                }
                else{
                    profit = max( + prices[i]+dp[i+1][1]   ,   dp[i+1][0]);
                }
                dp[i][j]=profit;
            }
        }
        return dp[0][1];
    }
    //Space optimized
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<int> ahead(2,0),curr(2,0);
        for(int i =n-1;i>=0;i--)
        {
            for(int j = 0;j<=1;j++)
            {
                int profit = 0;
                if(j){
                    profit = max( - prices[i] +ahead[0]  ,   ahead[1]);
                }
                else{
                    profit = max( + prices[i]+ahead[1]   ,   ahead[0]);
                }
                curr[j]=profit;
            }
            ahead = curr;
        }
        return curr[1];
    }

};