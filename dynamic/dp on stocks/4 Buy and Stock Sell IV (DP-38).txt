	
Buy and Stock Sell IV |(DP-38)

You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.

Find the maximum profit you can achieve. You may complete at most k transactions: i.e. you may buy at most k times and sell at most k times.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: k = 2, prices = [2,4,1]
Output: 2
Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.
Example 2:

Input: k = 2, prices = [3,2,6,5,0,3]
Output: 7
Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
 

 class Solution {
public:
//Space Optimazation
    int maxProfit(int k, vector<int>& prices) {
        int n = prices.size();
        vector<vector<int>> curr(2,vector<int>(k+1,0));
        vector<vector<int>> next(2,vector<int>(k+1,0));
        for(int ind = n-1;ind>=0;ind--){
            for(int buy = 0;buy<=1;buy++){
                for(int cnt=0;cnt<k;cnt++){
                    if(buy){
                        curr[buy][cnt] = max ( -prices[ind] + next[0][cnt]  , next[1][cnt]  );
                    }
                    else{
                        curr[buy][cnt] = max (  +prices[ind] + next[1][cnt+1] ,next[0][cnt]    );
                    }
                }
            }
            next = curr;
        }
        return curr[1][0];
    }
};