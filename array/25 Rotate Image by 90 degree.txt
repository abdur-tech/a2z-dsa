Rotate Image by 90 degree
Problem Statement: Given a matrix, your task is to rotate the matrix 90 degrees clockwise.

Example 1:

Input: [[1,2,3],
        [4,5,6],
        [7,8,9]]

Output: [[7,4,1],
        [8,5,2],
        [9,6,3]]

Explanation: Rotate the matrix simply by 90 degree clockwise and return the matrix.

Example 2:

Input: [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]

Output:[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]

Explanation: Rotate the matrix simply by 90 degree clockwise and return the matrix


Brute Force Approach

Algorithm / Intuition
Approach: Take another dummy matrix of n*n, and then take the first row of the matrix and put it in the last column of the dummy matrix, take the second row of the matrix, and put it in the second last column of the matrix and so.

vector < vector < int >> rotate(vector < vector < int >> & matrix) {
    int n = matrix.size();
    vector < vector < int >> rotated(n, vector < int > (n, 0));
    for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
        rotated[j][n - i - 1] = matrix[i][j];
    }
    }
    return rotated;
}
Time Complexity: O(N*N) to linearly iterate and put it into some other matrix.

Space Complexity: O(N*N) to copy it into some other matrix.

------------------------------------
Optimal Approach
Algorithm / Intuition
Intuition: By observation, we see that the first column of the original matrix is the reverse of the first row of the rotated matrix, so thatâ€™s why we transpose the matrix and then reverse each row, and since we are making changes in the matrix itself space complexity gets reduced to O(1).

Approach:

Step 1: Transpose the matrix. (transposing means changing columns to rows and rows to columns)

Step 2: Reverse each row of the matrix.

void rotateMatrix(vector<vector<int>> &mat){
	// Write your code here.
	int n = mat.size();
	//transpose 
	for(int i = 0;i<n-1;i++){
		for(int j = i+1;j<n;j++){  //oru time tha swpa pananum , nee n renduthalaiyum potana  , onna tha irukum
			swap(mat[i][j],mat[j][i]);
		}
	}
	//reverse
	for(int i = 0;i<n;i++){
		reverse(mat[i].begin(),mat[i].end());
	}
}

Time Complexity: O(N*N) + O(N*N).One O(N*N) is for transposing the matrix and the other is for reversing the matrix.

Space Complexity: O(1).



