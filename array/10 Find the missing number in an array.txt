Problem Statement: Given an integer N and an array of size N-1 containing N-1 numbers between 1 to N. Find the number(between 1 to N), that is not present in the given array.
Example 1:
Input Format: N = 5, array[] = {1,2,4,5}
Result: 3
Explanation: In the given array, number 3 is missing. So, 3 is the answer.

Example 2:
Input Format: N = 3, array[] = {1,3}
Result: 2
Explanation: In the given array, number 2 is missing. So, 2 is the answer.

class Solution {
public:
    int _missingNumber(vector<int>& nums) { //sum natural  solution
        int sum = 0;
        int n = nums.size();
        int total = n*(n+1)/2;
        for(auto it:nums)
        {
            sum+=it;
        }
        
        return total-sum;
    }
    int missingNumber(vector<int>& nums) {  //xorr solution
        int xorr1 = 0;
        int xorr2 = 0;
        for(int i = 0;i<nums.size();i++)
        {
            xorr2 = xorr2 ^ nums[i];
            xorr1 = xorr1 ^ (i);
        }
        xorr1 = xorr1^nums.size();

        return xorr1^xorr2;
    }
};