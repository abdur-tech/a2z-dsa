Spiral Traversal of Matrix
Problem Statement: Given a Matrix, print the given matrix in spiral order.

Examples:

Example 1:
Input: Matrix[][] = { { 1, 2, 3, 4 },
		      { 5, 6, 7, 8 },
		      { 9, 10, 11, 12 },
	              { 13, 14, 15, 16 } }

Outhput: 1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10.
Explanation: The output of matrix in spiral form.

Example 2:
Input: Matrix[][] = { { 1, 2, 3 },
	              { 4, 5, 6 },
		      { 7, 8, 9 } }
			    
Output: 1, 2, 3, 6, 9, 8, 7, 4, 5.
Explanation: The output of matrix in spiral form.

vector<int> spiralMatrix(vector<vector<int>>&mat) {
    // Write your code here.
    int n = mat.size();
    int m = mat[0].size();
    int top = 0;
    int bottom = n-1;
    int left = 0;
    int right = m-1;
    int i=0;
    vector<int> ans;
    while(top<=bottom && left<=right){
        if(i==0){
            for(int i = left;i<=right;i++){
                ans.push_back(mat[top][i]);
            }
            top++;
        }
        else if(i==1){
            for(int i = top;i<=bottom;i++){
                ans.push_back(mat[i][right]);
            }
            right--;
        }
        else if(i==2){
            for(int i = right;i>=left;i--){
                ans.push_back(mat[bottom][i]);
            }
            bottom--;
        }
        else{
            for(int i = bottom;i>=top;i--){
                ans.push_back(mat[i][left]);
            }
            left++;
        }
        i=(i+1)%4;
    }
    return ans;
}

Time Complexity: O(m x n) { Since all the elements are being traversed once and there are total n x m elements ( m elements in each row and total n rows) so the time complexity will be O(n x m)}.

Space Complexity: O(n) { Extra Space used for storing traversal in the ans array }.

