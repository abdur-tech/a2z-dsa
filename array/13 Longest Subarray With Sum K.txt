Problem Statement: Given an array and a sum k, we need to print the length of the longest subarray that sums to k.

Example 1:
Input Format: N = 3, k = 5, array[] = {2,3,5}
Result: 2
Explanation: The longest subarray with sum 5 is {2, 3}. And its length is 2.

Example 2:
Input Format: N = 5, k = 10, array[] = {2,3,5,1,9}
Result: 3
Explanation: The longest subarray with sum 10 is {2, 3, 5}. And its length is 3.

#include<bits/stdc++.h>
int _longestSubarrayWithSumK(vector<int> a, long long k) {
       // Write your code here
  //This is the better solution for both positive and negative integers .. but for
  // only positice this is not
    map<long long , int> preSum;
    long long sum =0;
    int n = a.size();
    int maxLen = 0;
    for(int i =0 ; i<n ; i++ )
    {
        sum+= a[i];
        if(sum == k)
            maxLen = max(maxLen, i+1);
        long long rem = sum - k;
        if(preSum.find(rem) != preSum.end())
        {
            int len = i - preSum[rem];
            maxLen = max(maxLen , len);
        }
        if(preSum.find(sum) == preSum.end())
            preSum[sum] = i;
    }

    return maxLen;
}


int longestSubarrayWithSumK(vector<int> a, long long k) {
    int n=a.size();
    int maxlen=0;
    int right=0;
    int left=0;
    long long sum=a[0];
    while(right<n)
    {
        while(left<=right && sum>k)
        {
            sum-=a[left];
            left++;
        }
        if(sum==k)
        {
        maxlen=max(maxlen,right-left+1);
        }
        right++;
        if(right<n)
        sum+=a[right];
    }
 return maxlen;
}