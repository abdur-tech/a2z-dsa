Count Reverse Pairs
Problem Statement: Given an array of numbers, you need to return the count of reverse pairs. Reverse Pairs are those pairs where i<j and arr[i]>2*arr[j].

Example 1:

Input: N = 5, array[] = {1,3,2,3,1)

Output: 2 

Explanation: The pairs are (3, 1) and (3, 1) as from both the pairs the condition arr[i] > 2*arr[j] is satisfied.

Example 2:

Input: N = 4, array[] = {3,2,1,4}

Output: 1

Explaination: There is only 1 pair  ( 3 , 1 ) that satisfy the condition arr[i] > 2*arr[j]


void mergeSort(vector<int>&a,int left,int mid,int right,int &ans)
{
    int i = left;
    int j = mid+1;
    int k = left;
    int temp[left+right+1];

    while(i<=mid && j<=right){
        if(a[i]<=a[j]){
            temp[k++]=a[i++];
        }
        else{
            temp[k++]=a[j++];
            ans+=(mid-i)+1;
        }
    }
    while(i<=mid){
            temp[k++]=a[i++];
    }
    while(j<=right){
            temp[k++]=a[j++];
    }
    for(int s = left;s<=right;s++){
        a[s] = temp[s];
    }
}

void merge(vector<int>&a,int left,int right,int &ans)
{
    if(left<right){
        int mid = (left+right)/2;
        merge(a,left,mid,ans);
        merge(a,mid+1,right,ans);
        mergeSort(a,left,mid,right,ans);
    }
}

int numberOfInversions(vector<int>&a, int n) {
    // Write your code here.
    int ans = 0;
    merge(a,0,n-1,ans);
    return ans;
}

Complexity Analysis
Time Complexity: O(2N*logN), where N = size of the given array.
Reason: Inside the mergeSort() we call merge() and countPairs() except mergeSort() itself. Now, inside the function countPairs(), though we are running a nested loop, we are actually iterating the left half once and the right half once in total. That is why, the time complexity is O(N). And the merge() function also takes O(N). The mergeSort() takes O(logN) time complexity. Therefore, the overall time complexity will be O(logN * (N+N)) = O(2N*logN).

Space Complexity: O(N), as in the merge sort We use a temporary array to store elements in sorted order.