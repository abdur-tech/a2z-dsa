Majority Elements(>N/3 times) 

Problem Statement: Given an array of N integers. Find the elements that appear more than N/3 times in the array. If no such element exists, return an empty vector.

Example 1:
Input Format: N = 5, array[] = {1,2,2,3,2}
Result: 2
Explanation: Here we can see that the Count(1) = 1, Count(2) = 3 and Count(3) = 1.Therefore, the count of 2 is greater than N/3 times. Hence, 2 is the answer.

Example 2:
Input Format:  N = 6, array[] = {11,33,33,11,33,11}
Result: 11 33
Explanation: Here we can see that the Count(11) = 3 and Count(33) = 3. Therefore, the count of both 11 and 33 is greater than N/3 times. Hence, 11 and 33 is the answer.

Observation: How many integers can occur more than floor(N/3) times in the given array:

If we closely observe, in the given array, there can be a maximum of two integers that can occur more than floor(N/3) times. Letâ€™s understand it using the following scenario:
Assume there are 8 elements in the given array. Now, if there is any majority element, it should occur more than floor(8/3) = 2 times. So, the majority of elements should occur at least 3 times. Now, if we imagine there are 3 majority elements, then the total occurrence of them will be 3X3 = 9 i.e. greater than the size of the array. But this should not happen. That is why there can be a maximum of 2 majority elements.


vector<int> majorityElement(vector<int> v) {
	vector<int> ans;
	int cnt1 = 0;
	int cnt2 = 0;
	int ele1 = 0;
	int ele2 = 0;
	for(auto it:v){
		if(ele1==it) cnt1++;
		else if (ele2==it) cnt2++;
		else if(cnt1==0) ele1 = it;
		else if (cnt2==0) ele2 = it;
		else{
			cnt1--;cnt2--;
		}
	}
	cnt1=0;
	cnt2=0;
	for(auto it:v){
		if(it==ele1){
			cnt1++;
		}
		if(it==ele2){
			cnt2++;
		}
	}
	if(cnt1>v.size()/3) ans.push_back(ele1);
	if(cnt2>v.size()/3) ans.push_back(ele2);
	sort(ans.begin(),ans.end());
	return ans;

}

Complexity Analysis
Time Complexity: O(N) + O(N), where N = size of the given array.
Reason: The first O(N) is to calculate the counts and find the expected majority elements. The second one is to check if the calculated elements are the majority ones or not.

Space Complexity: O(1) as we are only using a list that stores a maximum of 2 elements. The space used is so small that it can be considered constant.
