 Sort An Array of 0s, 1s and 2s

 Given an array consisting of only 0s, 1s, and 2s. Write a program to in-place sort the array without using inbuilt sort functions. ( Expected: Single pass-O(N) and constant space)

 Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

Input: nums = [2,0,1]
Output: [0,1,2]

Input: nums = [0]
Output: [0]

This problem is a variation of the popular Dutch National flag algorithm. 

#include <bits/stdc++.h> 
void sortArray(vector<int>& arr, int n)
{
    int low = 0;
    int mid = 0;
    int high = n-1;
    while(mid<=high)
    {
        if(arr[mid]==0)
        {
            swap(arr[low++],arr[mid++]);
        }
        else if(arr[mid]==1){
            mid++;
        }
        else{
            swap(arr[mid],arr[high--]);
        }
    }
}

TC -> O(n)

SC -> O(1)