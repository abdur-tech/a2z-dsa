	
Rat in a Maze

Rat in a Maze

Consider a rat placed at (0, 0) in a square matrix of order N * N. It has to reach the destination at (N - 1, N - 1). Find all possible paths that the rat can take to reach from source to destination. The directions in which the rat can move are 'U'(up), 'D'(down), 'L' (left), 'R' (right). Value 0 at a cell in the matrix represents that it is blocked and the rat cannot move to it while value 1 at a cell in the matrix represents that rat can travel through it.

Note: In a path, no cell can be visited more than one time.

Print the answer in lexicographical(sorted) order

Example 1:

Input:
N = 4
m[][] = {{1, 0, 0, 0},
        {1, 1, 0, 1}, 
        {1, 1, 0, 0},
        {0, 1, 1, 1}}

Output: DDRDRR DRDDRR
Solution 1: Recursion


//{ Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function template for C++

class Solution{
    public:
    void reachend(int i,int j,string path,int n,vector<vector<int>> &mat,vector<vector<int>> &vis,
    vector<int> &dir,vector<char> &dirs,vector<string> &ans)
    {
        if(i==n-1 && j==n-1){
            ans.push_back(path);
            return;
        }
        vis[i][j]=1;
        for(int k=0;k<4;k++)
        {
            int drow = dir[k]+i;
            int dcol = dir[k+1]+j;
            if(drow>=0 && dcol>=0 && drow<n && dcol<n && vis[drow][dcol]==0 && mat[drow][dcol]==1)
            {
                reachend(drow,dcol,path+dirs[k],n,mat,vis,dir,dirs,ans);
            }
        }
        vis[i][j]=0;
    }
    vector<string> findPath(vector<vector<int>> &mat, int n) {
        vector<string> ans;
        if(mat[0][0]==0) return ans;
        vector<vector<int>> vis(n,vector<int>(n,0));
        vector<int> dir = {0,1,0,-1,0};
        vector<char> dirs = {'R','D','L','U'};
        string path = "";
        reachend(0,0,path,n,mat,vis,dir,dirs,ans);
        return ans;
    }
};


Time Complexity: O(4^(m*n)), because on every cell we need to try 4 different directions.

Space Complexity:  O(m*n), Maximum Depth of the recursion tree(auxiliary space).



