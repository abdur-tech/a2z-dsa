 Expression Add Operators


see https://www.youtube.com/watch?v=S6OG5pGWxIw&t=16s&ab_channel=AlgorithmHQ


Given a string num that contains only digits and an integer target, return all possibilities to insert the binary operators '+', '-', and/or '*' between the digits of num so that the resultant expression evaluates to the target value.

Note that operands in the returned expressions should not contain leading zeros.

 

Example 1:

Input: num = "123", target = 6
Output: ["1*2*3","1+2+3"]
Explanation: Both "1*2*3" and "1+2+3" evaluate to 6.
Example 2:

Input: num = "232", target = 8
Output: ["2*3+2","2+3*2"]
Explanation: Both "2*3+2" and "2+3*2" evaluate to 8.
Example 3:

Input: num = "3456237490", target = 9191
Output: []
Explanation: There are no expressions that can be created from "3456237490" to evaluate to 9191.


#include<bits/stdc++.h>
class Solution {
public:
    void recursiveCall(int i, string sumPath, long sum, long prev, string num, int target, vector<string> &result)
        {
           	if (i == num.size())
            {
                if (sum == target)
                {
                   	// If the target is achieved, add the path to the result
                    result.push_back(sumPath);
                }
                return;
            }
            for (int j = i; j < num.size(); j++)
            {
                if (j > i && num[i] == '0')
                {
                   	// Avoid leading zeros in the number
                    break;
                }

                long number = stol(num.substr(i, j - i + 1));
               	// Convert the substring to a long number
                string tempPath = num.substr(i, j - i + 1);
               	// Temporary substring representing the path we have traversed so far

                if (i == 0)
                {
                   	// If we are on the first index of 'num', start a new path
                    recursiveCall(j + 1, tempPath, number, number, num, target, result);
                }
                else
                {
                   	// Addition operation
                    recursiveCall(j + 1, sumPath + '+' + tempPath, sum + number, number, num, target, result);
                   	// Subtraction operation
                    recursiveCall(j + 1, sumPath + '-' + tempPath, sum - number, -number, num, target, result);
                   	// Multiplication operation
                    recursiveCall(j + 1, sumPath + '*' + tempPath, sum - prev + (prev *number), prev *number, num, target, result);
                   	// While doing the multiplication operation, we remove the previous operation and update it with the multiplication operation
                   	// This is done to follow the BODMAS rules for correct precedence
                }
            }

        }
    vector<string> addOperators(string num, int target) {
         vector<string> result;
        recursiveCall(0, "", 0, 0, num, target, result);
        //recursiveCall(CurrentIndex,Path,sum,prev,num,target,result)
        return result;
    }
};