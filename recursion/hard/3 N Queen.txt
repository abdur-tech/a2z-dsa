N Queen Problem | Return all Distinct Solutions to the N-Queens Puzzle

Problem Statement: The n-queens is the problem of placing n queens on n × n chessboard such that no two queens can attack each other. Given an integer n, return all distinct solutions to the n -queens puzzle. Each solution contains a distinct boards configuration of the queen's placement, where ‘Q’ and ‘.’ indicate queen and empty space respectively.


Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above

Solution 2: 

Intuition: This is the optimization of the issafe function. In the previous issafe function, we need o(N) for a row, o(N) for the column, and o(N) for the diagonal. Here, we will use hashing to maintain a list to check whether that position can be the right one or not.

Approach: 


see take u forward blog for understanding the array structure


class Solution {
public:
    void solve(int col,int n,vector<string> &board,vector<vector<string>> &ans,
     vector < int > & leftrow, vector < int > & upperDiagonal, vector < int > & lowerDiagonal)
    {
        if(col==n)
        {
            ans.push_back(board);
            return;
        }
        for(int row = 0;row<n;row++)
        {
            if(leftrow[row]==0 && upperDiagonal[(n-1)+(col-row)]==0 && lowerDiagonal[row+col]==0)
            {
                board[row][col] = 'Q';
                leftrow[row] = 1;
                lowerDiagonal[row + col] = 1;
                upperDiagonal[n - 1 + col - row] = 1;
                solve(col+1,n,board,ans,leftrow, upperDiagonal, lowerDiagonal);
                board[row][col] = '.';
                leftrow[row] = 0;
                lowerDiagonal[row + col] = 0;
                upperDiagonal[n - 1 + col - row] = 0;
            }
        }
    }
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> board(n);
        string s(n,'.');
        for(int i = 0;i<n;i++) board[i] = s;
         vector < int > leftrow(n, 0), upperDiagonal(2 * n - 1, 0), lowerDiagonal(2 * n - 1, 0);
        solve(0,n,board,ans,leftrow, upperDiagonal, lowerDiagonal);
        return ans;
    }
};


TC -> O(N! * N)
