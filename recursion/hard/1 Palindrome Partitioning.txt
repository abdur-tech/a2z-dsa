Palindrome Partitioning


Problem Statement: You are given a string s, partition it in such a way that every substring is a palindrome. Return all such palindromic partitions of s.

Note: A palindrome string is a string that reads the same backward as forward.

Examples:

Example 1:

Input: s = “aab”

Output: [ ["a","a","b"], ["aa","b"] ]	

Explanation: The first  answer is generated by  making three partitions. The second answer is generated by making two partitions.

Example 2:

Input: s = “aabb”

Output: [ [“a”,”a”,”b”,”b”], [“aa”,”bb”], [“a”,”a”,”bb”], [“aa”,”b”,”b”] ] 

Explanation: See Figure


class Solution {
public:
    bool ispalindrome(string newstr)
    {
        int n = newstr.size();
        for(int i = 0;i<n/2;i++)
        {
            if(newstr[i]!=newstr[n-i-1]) return false;
        }
        return true;
    }
    void helper(int index,vector<string> &temp,string s, vector<vector<string>> &ans)
    {
        if(index==s.size())
        {
            ans.push_back(temp);
            return;
        }
        for(int i = index;i<s.size();i++)
        {
            string par = s.substr(index,i-index+1);
            if(ispalindrome(par))
            {
                temp.push_back(par);
                helper(i+1,temp,s,ans);
                temp.pop_back();
            }
        }
    }
    vector<vector<string>> partition(string s) {
        vector<vector<string>> ans;
        vector<string> temp;
        if(s.size()>0) helper(0,temp,s,ans);
        return ans;
    }
};

Time Complexity: O( (2^n) *k*(n/2) )

Reason: O(2^n) to generate every substring and O(n/2)  to check if the substring generated is a palindrome. O(k) is for inserting the palindromes in another data structure, where k  is the average length of the palindrome list.

Space Complexity: O(k * x)

Reason: The space complexity can vary depending upon the length of the answer. k is the average length of the list of palindromes and if we have x such list of palindromes in our final answer. The depth of the recursion tree is n, so the auxiliary space required is equal to the O(n).

