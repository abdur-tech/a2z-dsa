Combination Sum II - Find all unique combinations

In this article we will solve the most asked interview question "Combination Sum II - Find all unique combinations".

Problem Statement: Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target. Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.


Examples:

Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8

Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]]


Explanation: These are the unique combinations whose sum is equal to target.
 
Example 2:

Input: candidates = [2,5,2,1,2], target = 5

Output: [[1,2,2],[5]]

Explanation: These are the unique combinations whose sum is equal to target.


#include<bits/stdc++.h>
class Solution {
public:
void findUnique(int index,int sum,int target,vector<int> &temp,vector<int>&     candidates,                                vector < vector < int >> & ans){
        if (target == sum) {
        ans.push_back(temp);
        return;
        }
        for (int i = index; i < candidates.size(); i++) {
            if (i > index && candidates[i] == candidates[i - 1]) continue;
            if (candidates[i] > target) break;
            temp.push_back(candidates[i]);
            findUnique(i+1,sum+candidates[i],target,temp,candidates,ans);
            temp.pop_back();
        }
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>> ans;
        vector<int> temp;
        sort(candidates.begin(),candidates.end());
        findUnique(0,0,target,temp,candidates,ans);
        return ans;
    }
};
