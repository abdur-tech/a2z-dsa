Letter Combinations of a Phone Number

Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.


Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]

class Solution {
public:
    void findCombination(int index,string temp,string digits,unordered_map<char,string> &mp,vector<string> &ans)
    {
        if(index==digits.size()){
            ans.push_back(temp);
            return;
        }
        string curr = mp[digits[index]];
        for(int i = 0;i<curr.size();i++)
        {
            findCombination(index+1,temp+curr[i],digits,mp,ans);
        }
    } 
    vector<string> letterCombinations(string digits) {
        vector<string> ans;
        unordered_map<char,string> mp = {
            {'2', "abc"},
            {'3', "def"},
            {'4', "ghi"},
            {'5', "jkl"},
            {'6', "mno"},
            {'7', "pqrs"},
            {'8', "tuv"},
            {'9', "wxyz"}
        };
        if(digits.size()>0){
            findCombination(0,"",digits,mp,ans);
        }
        return ans;
    }
};


TC = N*O(4 power N)
