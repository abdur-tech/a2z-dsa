Generate Paranthesis

Problem statement
You are given an integer 'N', your task is to generate all combinations of well-formed parenthesis having ‘N’ pairs.



A parenthesis is called well-formed if it is balanced i.e. each left parenthesis has a matching right parenthesis and the matched pairs are well nested.



For Example:

For ‘N’ = 3,
All possible combinations are: 
((()))
(()())
(())()
()(())
()()()

void helper(vector<string> &ans,int open,int close,int n,string paranthesis)
{
    if(open==n && close==n){
        ans.push_back(paranthesis);
        return;
    }
    if(open<n) helper(ans,open+1,close,n,paranthesis+"(");
    if(close<open) helper(ans, open, close+1, n, paranthesis+")");
}

vector<string> validParenthesis(int n){
    vector<string> ans;
    helper(ans,0,0,n,"");
    return ans;
}

