Find the row with maximum number of 1’s
Problem Statement: You have been given a non-empty grid ‘mat’ with ‘n’ rows and ‘m’ columns consisting of only 0s and 1s. All the rows are sorted in ascending order.
Your task is to find the index of the row with the maximum number of ones.
Note: If two rows have the same number of ones, consider the one with a smaller index. If there’s no row with at least 1 zero, return -1.

Examples
Example 1:
Input Format: n = 3, m = 3, 
mat[] = 
1 1 1
0 0 1
0 0 0
Result: 0
Explanation: The row with the maximum number of ones is 0 (0 - indexed).

Example 2:
Input Format: n = 2, m = 2 , 
mat[] = 
0 0
0 0
Result: -1
Explanation:  The matrix does not contain any 1. So, -1 is the answer.


Optimal Approach
Algorithm / Intuition
We are going to use the Binary Search algorithm to optimize the approach.

The primary objective of the Binary Search algorithm is to efficiently determine the appropriate half to eliminate, thereby reducing the search space by half. It does this by determining a specific condition that ensures that the target is not present in that half.

We cannot optimize the row traversal but we can optimize the counting of 1’s for each row.

Instead of counting the number of 1’s, we can use the following formula to calculate the number of 1’s:
Number_of_ones = m(number of columns) – first occurrence of 1(0-based index).

As, each row is sorted, we can find the first occurrence of 1 in each row using any of the following approaches:

int NoOfOne(vector<int> &matrix,int m)
{
    int low = 0;
    int high = m-1;
    int ind = -1;
    while(low<=high){
        int mid = (low+high)/2;
        if(matrix[mid]==1){
            ind=mid;
            high=mid-1;
        }
        else{
            low=mid+1;
        }
    }
    if(ind==-1) return ind;
    return m-ind+1;
}
int rowWithMax1s(vector<vector<int>> &matrix, int n, int m)
{
    int ans=0;
    int max_ind=-1;
    for(int i = 0;i<n;i++)
    {
        int val = NoOfOne(matrix[i],m);
        if(val>ans){
            max_ind = i;
            ans = val;
        }
    }
    return max_ind;
}
Complexity Analysis
Time Complexity: O(n X logm), where n = given row number, m = given column number.
Reason: We are using a loop running for n times to traverse the rows. Then we are applying binary search on each row with m columns.

Space Complexity: O(1) as we are not using any extra space.
