K-th Element of two sorted arrays
Problem Statement: Given two sorted arrays of size m and n respectively, you are tasked with finding the element that would be at the kth position of the final sorted array.

Examples :

Input: m = 5
       n = 4
       array1 = [2,3,6,7,9]
       array2 = [1,4,8,10]
       k = 5

Output:
 6

Explanation: Merging both arrays and sorted. Final array will be -
 [1,2,3,4,6,7,8,9,10]
We can see at k = 5 in the final array has 6. 


Input:
 m = 1
       n = 4
       array1 = [0]
       array2 = [1,4,8,10]
       k = 2

Output:
 4

Explanation:
 Merging both arrays and sorted. Final array will be -
 [1,4,8,10]
We can see at k = 2 in the final array has 4


#include<bits/stdc++.h>
int kthElement(vector<int> &arr1, vector<int>& arr2, int n, int m, int k){
	if(n>m) return kthElement(arr2, arr1,m,n,k);
	int low = max(0,k-m), high = min(k,n);
	while(low<=high)
	{
		int mid1 = (low+high)/2;
		int mid2 = k-mid1;
		int l1 = INT_MIN, l2=INT_MIN;
		int r1 = INT_MAX, r2=INT_MAX;
		if(mid1<n) r1=arr1[mid1];
		if(mid2<m) r2=arr2[mid2];
		if(mid1-1>=0) l1=arr1[mid1-1];
		if(mid2-1>=0) l2=arr2[mid2-1];

		if(l1<=r2 && l2<=r1){
            return max(l1,l2);
		}
		else if (l1>r2) high=mid1-1;
		else low=mid1+1;
	}
	return 0;
}

Time Complexity : log(min(m,n))

Reason: We are applying binary search in the array with minimum size among the two. And we know the time complexity of the binary search is log(N) where N is the size of the array. Thus, the time complexity of this approach is log(min(m,n)), where m,n are the sizes of two arrays.

Space Complexity: O(1)

Reason: Since no extra data structure is used, making space complexity to O(1).