Rotate a Linked List

In this article, we will solve the problem: "Rotate a Linked List"

Problem Statement: Given the head of a linked list, rotate the list to the right by k places.


Example 1:
Input:
	head = [1,2,3,4,5] 
	k = 2
Output:
 head = [4,5,1,2,3]
Explanation:
 We have to rotate the list to the right twice.

 Solution: Optimal Solution

 
Node *rotate(Node *head, int k) {
     if(k==0) return head;
     int len = 0;
     Node* lastNode   = nullptr;
     Node* temp = head;
     while(temp)
     {
          len++;
          if(!temp->next) lastNode=temp;
          temp=temp->next;
     }
     k = k % len;
     if(k==0) return head;
     temp=head;
     int new_cnt  = 0;
     while(temp)
     {
          new_cnt++;
          if(new_cnt==(len-k))
          {
               Node* next = temp->next;
               temp->next = nullptr;
               lastNode->next = head;
               return next;
          }
          temp=temp->next;
     }


}


Time Complexity: O(length of list) + O(length of list - (length of list%k))

Reason: O(length of the list) for calculating the length of the list. O(length of the list - (length of list%k)) for breaking link.

Space Complexity: O(1)