Problem statement
You are given two non-negative numbers 'num1' and 'num2' represented in the form of linked lists.



The digits in the linked lists are stored in reverse order, i.e. starting from least significant digit (LSD) to the most significant digit (MSD), and each of their nodes contains a single digit.



Calculate the sum of the two numbers and return the head of the sum list.



Example :
Input:
'num1' : 1 -> 2 -> 3 -> NULL
'num2' : 4 -> 5 -> 6 -> NULL

Output: 5 -> 7 -> 9 -> NULL

Explanation: 'num1' represents the number 321 and 'num2' represents 654. Their sum is 975.

Sample Input 1 :
3
1 2 3
3
4 5 6


Sample Output 1 :
5 7 9


Explanation for Sample Input 1 :
'num1' represents the number 321 and 'num2' represents 654. Their sum is 975.


Sample Input 2 :
2
0 1
1
0


Sample Output 2 :
0 1


Explanation for Sample Input 2 :
'num1' represents 10 and 'num2' represents 0. Their sum is 10.


Sample Input 3 :
1
2
2
9 9


Sample Output 3 :
1 0 1


Explanation for Sample Input 3 :
'num1' represents 2 and 'num2' represents 99. Their sum is 101.


Expected Time Complexity :
The expected time complexity is O('m' + 'n').

Node *addTwoNumbers(Node *num1, Node *num2)
{
    Node* dummyNode = new Node(0);
    Node* temp = dummyNode;
    int carry = 0;
    while(num1 || num2 || carry)
    {
        int sum = 0;
        if(num1)
        {
            sum+=num1->data;
            num1 = num1->next;
        }
        if(num2)
        {
            sum+=num2->data;
            num2 = num2->next;
        }
        sum+=carry;
        carry = sum/10;
        Node* newNode = new Node(sum%10);
        temp->next = newNode;
        temp = temp->next;
    }
    return dummyNode->next;
}

O(max(m1+m2))
