Sort Linked List

Problem statement
Given a linked list of 'N' nodes, which has nodes in alternating non-decreasing and non-increasing. Sort the list in non-decreasing order.



For Example:

If given linked list is 1->9->3->8->4 then it should be modified to 1->3->4->8->9.

Sample Input 1 :
7
1 9 2 8 3 7 4 
Sample Output 1 :
1 2 3 4 7 8 9
Explanation to Sample Input 1 :
Since the given list is 1-> 9-> 2-> 8 -> 3 -> 7-> 4.
After sorting, it will be 1-> 2-> 3-> 4-> 7-> 8-> 9.
Sample Input 2 :
6
7 15 8 14 9 13
Sample Output 2 :
7 8 9 13 14 15    
Explanation to Sample Input 1 :
Since the given list is 7-> 15-> 8-> 14 -> 9 -> 13.
After sorting, it will be 7-> 8-> 9-> 13-> 14-> 15.
Expected Space Complexity:
Try to solve this problem in O(1) space complexity.


Constraints :
1 <= N <= 10^3
0 <= data <= 10^3 

Where 'N' is the length of the linked list.

Time Limit: 1 sec



Node* mergeTwoLL(Node* list1,Node* list2)
{
    Node* dummyNode = new Node(-1);
    Node* temp = dummyNode;
    while(list1 && list2)
    {
        if(list1->data<list2->data){
            temp->next=list1;
            temp=list1;
            list1=list1->next;
        }
        else{
             temp->next=list2;
            temp=list2;
            list2=list2->next;
        }
    }
    if(list1) temp->next = list1;
    if(list2) temp->next = list2;
    return dummyNode->next;
}
Node* findmiddle(Node* head)
{
    Node* slow = head;
    Node* fast = head->next; // because we need to before middle
    while(fast && fast->next)
    {
        slow=slow->next;
        fast=fast->next->next;
    }
    return slow;
}
Node* sortList(Node* head){
   if(head == NULL || head->next==NULL) return head;
   Node* middle = findmiddle(head);
   Node* leftNode = head;
   Node* rightNode = middle->next;
   middle->next=NULL; //to split the array for merge sort algorithm

    leftNode = sortList(leftNode);
    rightNode = sortList(rightNode);

    return mergeTwoLL(leftNode,rightNode);
}



TC -> O(N)*O(logN+N/2)
SC -> O(logN) -> for recursive stack space