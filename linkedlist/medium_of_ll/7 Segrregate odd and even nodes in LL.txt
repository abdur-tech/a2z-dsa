Segregate Even And Odd Nodes In a Linked List


Problem statement
You are given the head node of a singly linked list 'head'. Your task is to modify the linked list in such a way that all the even valued nodes appear before the all odd valued node and order of nodes remain the same.



Example :-
The given singly linked list is  6 -> 5 -> 3 -> 4 -> 7 -> 1 -> 2 

Sample Input 1
2 1 3 5 6 4 7 -1
Sample Output 1
2 6 4 1 3 5 7
Explanation of Sample Input 1
Given singly linked list 2 -> 1 -> 3 -> 5 -> 6 -> 4 -> 7.

Arrange all the even values in the starting and odd values at the end of the linked list.

So ‘2, 6, 4’ must appear in the starting and ‘1, 3, 5, 7’ must appear at the end of linked list 

So return 2 -> 6 -> 4 -> 1 -> 3 -> 5 -> 7
Sample Input 2
6 5 4 3 2 1 -1
Sample Output 2
6 4 2 5 3 1

Node* segregateEvenOdd(Node* head)
{
     if(head == nullptr || head->next == nullptr) {
        return head;
    }
    Node* evenhead=nullptr;
    Node* oddhead= nullptr;
    Node* odd=nullptr;
    Node* even=nullptr;

    while(head)
    {
        if(head->data%2==0)
        //even 
        {
            if(evenhead==nullptr)
            {
                evenhead=head;
                even=head;
            }
            else{
                even->next = head;
                even = even->next;
            }
        }
        else
        //odd
        {
            if(oddhead==nullptr)
            {
                oddhead=head;
                odd=head;
            }
            else{
                odd->next = head;
                odd = odd->next;
            }
        }
        head=head->next;
    }
    if(even){
        even->next=oddhead;
    }
    if(odd){
        odd->next=nullptr;
    }
    if(evenhead) return evenhead;
    return oddhead;
}


