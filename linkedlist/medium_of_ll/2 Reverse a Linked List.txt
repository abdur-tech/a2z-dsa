Reverse a Linked List

Problem Statement: Problem Statement: Given the head of a singly linked list, write a program to reverse the linked list, and return the head pointer to the reversed list.



Example:

Input:
2 4 5 -1

Output:
5 4 2 -1

Explanation: 2->4->5 is the initial linked list. If we reverse this, we get 5->4->2.

Optimal Approach 1

Reverse Links in place (Iterative)

//iterative
Node* _reverseLinkedList(Node *head)
{
    Node* temp = nullptr;
    while(head)
    {
        Node* next = head->next;
        head->next = temp;
        temp = head;
        head = next;
    }
    return temp;
}

Time Complexity: O(N) The code traverses the entire linked list once, where 'n' is the number of nodes in the list. This traversal has a linear time complexity, O(n).

Space Complexity: O(1) The code uses only a constant amount of additional space, regardless of the linked list's length. This is achieved by using three pointers (prev, temp and front) to reverse the list without any significant extra memory usage, resulting in constant space complexity, O(1).

Optimal Approach II
Algorithm / Intuition
Recursive 


Node* reverseLinkedList(Node *head)
{
   if(head==nullptr || head->next==nullptr)
   {
       return head;
   }
   Node* newhead = reverseLinkedList(head->next);

   Node* front = head->next;
   
   front->next=head;
   head->next=NULL;

   return newhead;
   
}

Time Complexity: O(N) This is because we traverse the linked list twice: once to push the values onto the stack, and once to pop the values and update the linked list. Both traversals take O(N) time.

Space Complexity : O(1) No additional space is used explicitly for data structures or allocations during the linked list reversal process. However, it's important to note that there is an implicit use of stack space due to recursion. This recursive stack space stores function calls and associated variables during the recursive traversal and reversal of the linked list. Despite this, no extra memory beyond the program's existing execution space is allocated, hence maintaining a space complexity of O(1).





